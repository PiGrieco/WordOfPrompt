[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "wordofprompt"
version = "1.0.0"
description = "AI-Powered Advertising Recommendation System with Multi-Agent Workflows"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Piermatteo Grieco", email = "piermatteo.grieco@aigot.com"},
    {name = "Youness ElBrag", email = "youness.elbrag@aigot.com"}
]
maintainers = [
    {name = "Piermatteo Grieco", email = "piermatteo.grieco@aigot.com"}
]
keywords = ["ai", "ml", "recommendation", "advertising", "multi-agent", "crewai", "amazon", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
requires-python = ">=3.9"
dependencies = [
    # Core Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    
    # AI and ML
    "crewai>=0.28.0",
    "langchain>=0.1.0",
    "langchain-community>=0.0.20",
    "langchain-openai>=0.0.5",
    "openai>=1.3.0",
    "transformers>=4.35.0",
    "torch>=2.0.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
    
    # Web Framework
    "flask>=3.0.0",
    "flask-socketio>=5.3.0",
    "flask-cors>=4.0.0",
    "gunicorn>=21.2.0",
    "gevent>=23.7.0",
    
    # HTTP and APIs
    "httpx>=0.25.0",
    "requests>=2.31.0",
    "aiohttp>=3.9.0",
    
    # Data Processing
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "beautifulsoup4>=4.12.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "tenacity>=8.2.0",
    
    # Security
    "bcrypt>=4.0.0",
    "cryptography>=41.0.0",
    
    # Monitoring
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/PiGrieco/WordOfPrompt-Integration"
Documentation = "https://wordofprompt.readthedocs.io/"
Repository = "https://github.com/PiGrieco/WordOfPrompt-Integration.git"
Issues = "https://github.com/PiGrieco/WordOfPrompt-Integration/issues"
Changelog = "https://github.com/PiGrieco/WordOfPrompt-Integration/blob/main/CHANGELOG.md"

[project.scripts]
wordofprompt = "wordofprompt.cli:main"
wop-server = "wordofprompt.api.main:run"
wop-worker = "wordofprompt.workers.main:run"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["wordofprompt"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
